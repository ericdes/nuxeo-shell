<?xml version="1.0"?>
<component name="org.nuxeo.ecm.shell.commands-base" version="1.0">

  <documentation>
    The basic command @author
    <a href="mailto:bs@nuxeo.com">Bogdan Stefanescu</a>
  </documentation>

  <extension target="org.nuxeo.ecm.shell.CommandLineService" point="commands">

    <command name="debug" class="org.nuxeo.ecm.shell.commands.DebugCommand"
      requireConnection="false">
      <description>
        Print the result of the command line parser
      </description>
      <help>
        This command is useful for debugging command line parser
      </help>
    </command>
    <command name="commands" class="org.nuxeo.ecm.shell.commands.CommandsCommand"
      requireConnection="false" alias="cmds">
      <description>
        Print the list of available commands
      </description>
      <help>
        Accepts a parameter to be used as a prefix to filter the
        list of
        commands
      </help>
    </command>

    <command name="help" class="org.nuxeo.ecm.shell.commands.HelpCommand"
      requireConnection="false" alt="h">
      <description>The Help</description>
      <help />
      <params>
        <param index="0" type="cmd" />
      </params>
    </command>

    <command name="reload" class="org.nuxeo.ecm.shell.commands.ReloadCommand"
      requireConnection="false" alt="r">
      <description>Reload command scripts</description>
      <help />
    </command>

    <command name="interactive" class="org.nuxeo.ecm.shell.commands.InteractiveCommand"
      requireConnection="false" alt="i,int">
      <description>Enter interactive mode</description>
      <help>TODO</help>
    </command>

    <command name="script" class="org.nuxeo.ecm.shell.commands.ScriptCommand"
      alt="s">
      <options>
        <option name="file" shortcut="f" var="true" type="file">
          A path to the
          script file to execute
        </option>
      </options>
      <description>Executes scripts</description>
      <help>TODO</help>
    </command>

    <command name="ls" class="org.nuxeo.ecm.shell.commands.repository.ListCommand"
      alt="list">
      <description>
        List directory content (on remote)
      </description>
      <params>
        <param index="0" type="doc" />
      </params>
      <help>TODO</help>
    </command>

    <command name="tree" class="org.nuxeo.ecm.shell.commands.repository.TreeCommand"
      alt="tree">
      <description>
        List directory content and subdirectory content (on remote),
        represented by a tree
      </description>
      <params>
        <param index="0" type="doc" />
      </params>
      <help>TODO</help>
    </command>

    <command name="cd"
      class="org.nuxeo.ecm.shell.commands.repository.ChangeDirCommand">
      <description>Change directory (on remote)</description>
      <params>
        <param index="0" type="doc" />
      </params>
      <help>TODO</help>
    </command>

    <command name="pwd" class="org.nuxeo.ecm.shell.commands.repository.PwdCommand">
      <description>
        Display the current path (on remote)
      </description>
      <help>TODO</help>
    </command>

    <command name="rm" class="org.nuxeo.ecm.shell.commands.repository.RmCommand">
      <description>
        Remove specified (or current) document
      </description>
      <help>TODO</help>
    </command>

    <command name="mkdir" class="org.nuxeo.ecm.shell.commands.repository.MkDirCommand">
      <description>
        Create a document of the specified type (or Folder) at
        the
        given path (or in the current path).
      </description>
      <params>
        <param index="0" type="path" />
        <param index="1" type="type" />
      </params>
      <help>TODO</help>
    </command>

    <command name="fsimport"
      class="org.nuxeo.ecm.shell.commands.repository.FSImportCommand">
      <description>
        Create a new file document from a local file
      </description>
      <params>
        <param index="0" type="file" />
        <param index="1" type="doc" />
      </params>
      <help>
        Import a FileSystem directory into Nuxeo repository.
      </help>
    </command>

    <command name="mtfsimport"
      class="org.nuxeo.ecm.shell.commands.repository.MTFSImportCommand">
      <description>
        Create a new file document from a local file
      </description>
      <params>
        <param index="0" type="file" />
        <param index="1" type="doc" />
      </params>
      <help>
        Import a FileSystem directory into Nuxeo repository.
      </help>
    </command>

    <command name="repostats"
      class="org.nuxeo.ecm.shell.commands.repository.RepoStatsCommand">
      <description>
        Gather statistics on the repository
      </description>
      <params>
        <param index="0" type="doc" />
      </params>
      <help>
        Gather statistics on the repository
      </help>
    </command>

    <command name="index" class="org.nuxeo.ecm.shell.commands.repository.IndexCommand">
      <description>Re-index database</description>
      <help>TODO</help>
    </command>

    <command name="auditsync" class="org.nuxeo.ecm.shell.commands.repository.AuditSync">
      <description>Sync audit logs with repository</description>
      <params>
        <param index="0" type="doc" />
      </params>
      <help>Re create audit creation logs for all document in a given path
        (usefull after a mass import with desactivated JMS)</help>
    </command>

    <!--
      <command name="indexOverload"
      class="org.nuxeo.ecm.shell.commands.repository.IndexOverloadCommand">
      <description> force multi-threaded indexing on the same doc </description>
      <params> <param index="0" type="doc" /> <param index="1" type="int" />
      </params> <help>TODO</help> </command>
    -->

    <!--
      <command name="doubleIndex"
      class="org.nuxeo.ecm.shell.commands.repository.DoubleIndex"> <description>
      force multiple indexing of the same document inside the same transaction
      </description> <params> <param index="0" type="doc" /> <param index="1"
      type="int" /> </params> <help>TODO</help> </command>
    -->

    <command name="view" class="org.nuxeo.ecm.shell.commands.repository.ViewCommand">
      <description>
        View the info about a document (on remote)
      </description>
      <params>
        <param index="0" type="doc" />
      </params>
      <help>TODO</help>
    </command>

    <command name="import" class="org.nuxeo.ecm.shell.commands.io.ImportCommand"
      alt="imp">
      <params>
        <param index="0" type="file" />
      </params>
      <params>
        <param index="1" type="doc" />
      </params>
      <options>
        <option name="update" var="false">
          Whether to update by ID existing
          documents. If this
          flag is not used the document path will be used as
          the document identifier and missing documents will
          be created.
        </option>
      </options>
      <description>Import data into the repository</description>
      <help>
        Imports data into the repository. The imported data
        should be a
        directory tree. Zip archives are not yet
        supported by this client.

        The
        first parameter represents the filesystem path to
        the archive to import.

        The second parameter is the Nuxeo path to a document
        that will be used as
        the root of the target subtree.
        When using the update mode (--update
        option) the root
        doesn't matter (you can use / as the root).

        In default
        mode (non-update), documents are matched by
        path. If a document already
        exists at the path specified
        in the import file, it will be updated with
        the new
        data. Otherwise a new document is created.

        In update mode,
        documents are matched by ID, and their
        path doesn't matter. Documents are
        only updated, never
        created (an ID not present in the repository will be
        ignored at import time).

        The update mode is recommended if you want to
        update a
        repository and not create new data, as it is faster and
        doesn't
        have a problem with documents that have moved.
      </help>
    </command>

    <command name="export" class="org.nuxeo.ecm.shell.commands.io.ExportCommand"
      alt="exp">
      <description>
        List directory content (on remote)
      </description>
      <params>
        <param index="0" type="doc" />
      </params>
      <params>
        <param index="1" type="file" />
      </params>
      <help>
        Export data from a repository

        The first parameter is the Nuxeo path
        of root of the
        tree to export.

        The second parameter is the filesystem
        directory where
        the export archive will be written.

        This client does not
        yet support zip archives as an
        export format. This will be added later.
      </help>
    </command>

    <command name="services" class="org.nuxeo.ecm.shell.commands.system.ServicesCommand">
      <description>
        List services
      </description>
      <help>
        TODO
      </help>
    </command>

    <command name="serviceinfo"
      class="org.nuxeo.ecm.shell.commands.system.ServiceInfoCommand">
      <description>
        List services
      </description>
      <help>
        TODO
      </help>
    </command>

    <command name="log" class="org.nuxeo.ecm.shell.commands.system.LogCommand">
      <description>
        Write log informations to given file.
        Usage: log filename [log
        level [package or class]]
      </description>
      <params>
        <param index="0" type="file" />
        <!--        <param index="1" type="loglevel" />-->
        <!--        <param index="1" type="class" />-->
      </params>
      <help>Dynamically define a logger and its parameters (output
        file, log level, package or class filtered)
      </help>
    </command>

  </extension>

  <!-- global options -->
  <extension target="org.nuxeo.ecm.shell.CommandLineService" point="options">

    <option name="username" shortcut="u" var="true" value="system">
      The username to
      use when connecting. If not specified the
      'system' user will be used.
    </option>

    <option name="password" shortcut="P" var="true">
      The password to use when
      connecting.
    </option>

    <option name="host" shortcut="h" var="true">
      The host where to connect to. By
      default no host is used - this
      will force a local connection (in VM
      repository)
    </option>

    <option name="port" shortcut="p" var="true" value="62474">
      The port where to
      connect to. By default '62474' is used.
    </option>

  </extension>

</component>
